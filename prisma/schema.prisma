generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  value  String                      @id
  ///
  groups GroupPermissionAssignment[]

  @@map("permission")
}

model Group {
  id          String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String                      @unique
  description String?
  ///
  permissions GroupPermissionAssignment[]
  user        GroupUserAssignment[]

  @@map("group")
}

model GroupPermissionAssignment {
  groupId      String     @map("group_id") @db.Uuid
  permissionId String     @map("permission_id")
  ///
  group        Group      @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  permission   Permission @relation(fields: [permissionId], references: [value], onDelete: Restrict, onUpdate: Restrict)

  @@id([permissionId, groupId])
  @@map("grouppermissionassignment")
}

model GroupUserAssignment {
  groupId String      @map("group_id") @db.Uuid
  userId  String      @map("user_id") @db.Uuid
  ///
  group   Group       @relation(fields: [groupId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user    UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([groupId, userId])
  @@map("groupuserassignment")
}

model UserProfile {
  id        String                @id @db.Uuid
  name      String
  email     String                @unique
  createdAt DateTime              @default(dbgenerated("now()")) @map("created_at")
  ///
  groups    GroupUserAssignment[]

  @@map("userprofile")
}
